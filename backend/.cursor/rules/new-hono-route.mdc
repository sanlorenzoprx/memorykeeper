import { Hono } from 'hono';
import { z } from 'zod';
import { zValidator } from '@hono/zod-validator';
import type { Env } from '../env'; // Your environment bindings

// Define the context variables set by middleware (e.g., auth)
type AppContext = {
  Bindings: Env;
  Variables: {
    auth: {
      userId: string;
    }
  }
};

const app = new Hono<AppContext>();

// Example GET route
app.get('/', async (c) => {
  const { userId } = c.get('auth');
  // ... your logic here
  return c.json({ success: true, userId });
});

// Example POST route with Zod validation
const postSchema = z.object({
  name: z.string().min(3),
});

app.post('/', zValidator('json', postSchema), async (c) => {
  const { userId } = c.get('auth');
  const body = c.req.valid('json');

  // ... logic to handle validated body
  return c.json({ message: `Hello, ${body.name} from user ${userId}` });
});

export default app;